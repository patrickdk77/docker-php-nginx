export PATH="$PWD/docker:$PATH"

declare -A build_from_prefix_map=( ["aarch64"]="arm64v8/" ["armv7"]="arm32v7/" ["armv6"]="arm32v6/" ["armv5"]="arm32v5/" ["i386"]="i386/" ["amd64"]="amd64/" )

declare -A docker_qemu_arch_map=( ["aarch64"]="aarch64" ["armv7"]="arm" ["armv6"]="arm" ["armv5"]="arm" ["i386"]="i386" ["amd64"]="x86_64" )

declare -A docker_to_manifest_map=( ["aarch64"]="arm64" ["armv7"]="arm" ["armv6"]="arm" ["armv5"]="arm" ["i386"]="386" ["amd64"]="amd64" )
declare -A docker_to_variant_map=( ["aarch64"]="v8" ["armv7"]="v7" ["armv6"]="v6" ["armv5"]="v5" ["i386"]="" ["amd64"]="" )

build_architectures=(amd64 i386 aarch64 armv7)

declare -A uniq_arch
verified_build_architectures=()
native_arch="$(docker version -f '{{.Server.Arch}}')"
#verified_build_architectures+=("${native_arch}")
uniq_arch["${native_arch}"]=1

for arch in ${build_architectures[@]}; do
  if [ -f "qemu-${docker_qemu_arch_map[${arch}]}-static" ]; then
    echo "qemu binary for $arch found";
    uniq_arch["$arch"]=1;
  fi
done

for arch in ${!uniq_arch[@]}; do
  verified_build_architectures+=($arch)
done

echo $verified_build_architectures
set -u

docker -v
echo
